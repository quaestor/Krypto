import Data.List
import Data.Function

chiff = "YEXEIXWHWMEIXFMBBIKASLNTXCBQBQSQFKUYZHIXXBYZEIEHJYYCIIBBXQSRRVVNTBXKXSMQJRNXBCSHIJVVHQJXLGRMACIUXQEFFIZGTLUTGYXFQQJWJXFMOIPVBSLWBYDFSBDBPJSKYUGMEZSLTPGYWSHNPHVGBIOIFVBROZLICASCFHPVBQBZBGYEOOPFWYTHNQOAZKHUXBFNTSLFTMEXWHQNHFKTXUFQVLGYSFLFXFNPBREPOLQOAZKOORHISKCWTFRLFPYUNIILHYZUEXXGFUDLKBBXUFFVKUYLVKVASHMMWNBFXQOWKXWFQOTWTRYDLPFFAYZEIILWWTEMVAOYZHIYBBUGGARGRMMIMTANOYFVJMSHYBPUBSUNUIZGWWTUMYKSGMVIIGIYNFVITGWTUIEFWWTTMVZZYUDLVGRYZBRUXFYZEMVBQBMMPVKCLFFRZGRYDDLIBGNXJGYXBQQMXXXGYTFRJHBXQSRUBSGMTWZZYYUUHVLGYZXEJLWWTTTRXHYDBPJWOMMFHZYWWUVQYXFUGTWKXZFQOWFEZNQFWNTFYUOETAHYOLMXXFVMVHVKOOEEIIYSLZFDLGOYOIWKPWYQJRMBSLQDORNGMMIHZXVIQDLJMJIXMIEWSNQGSIFOOEEVLVYXQSFVLHUQOHZZYYUUYEWIHQJREXVGNBVBXWNPFVJMOXFHSKMSMEFMEXGOQEJCTBEQSEXMSBADLLXPYDEEJIZUFFELWSLMCXVBKUQIVVGRXUFRFKRGMVIIGIHYJXKXZVMSELLRYYCIIZVUZHDLPOWTTIELQBUFRVGUFQJGYLQBDBIXBAZQMWMXFQGSDVEHYZCEVNAYZWSENBNQOKVLSBQOWTAWYZFWXXFUPFDLTZMHFVCTSHSFVKXGCOIHVKTYXTIESIGTJQDXZOYJRVBBYDHINBGMQOLFXVYAIRVLWWTUFRKSHIBRUXZCZGEVKPOZHYEWGNAGJQNAGMFGYMWAQOXLKATGXIIWSHQJRNXFEHPRIBSMQOLRGRAQTGYTTZQOMEZFIQTWKXFPQSXITINTFMKFWNTJQDXZOZEIIWSXDFMWXBMFFVIXWBQOWBTBXUFVKXBXQOXIBDYXSLPMVGGTHVLOORCELLRYDHIJMOFFEEJLKUEQLPLWMOIECLEOMEVRMOOREIIXFXQTXRGRMUDLJIWLUUYVEZUXTHIXWYOLDLFVCYNICXFBAC"

samefags n xs = countdooku $ samefags' n xs
samefags' n (x:xs) = take n (x:xs) : samefags' n xs
samefags' n _ = []

substr xs ys = substr' xs ys 0
substr' xs (y:ys) n	| take m (y:ys) == xs = n : substr' xs ys (n+1)
			| otherwise = substr' xs ys (n+1)
			where m = length xs
substr' _ _ _ = []

keylength = foldl1 gcd $ map (\x -> (x!!1) - (x!!0)) $ map (flip substr chiff)  $ map fst $ filter (\x -> snd x == 2) $ samefags 5 chiff

seventhson xs = sonofaseventhson xs [[],[],[],[],[],[],[]]
sonofaseventhson (son1:son2:son3:son4:son5:son6:son7:xs) (bro1:bro2:bro3:bro4:bro5:bro6:bro7:[]) = 
			sonofaseventhson xs [son1:bro1,son2:bro2,son3:bro3,son4:bro4,son5:bro5,son6:bro6,son7:bro7]
sonofaseventhson [] ys = ys
sonofaseventhson _ ys = ys

countdooku xs = sortBy (compare `on` snd) $ map (\x -> (head x, length x)) $ group $ sort xs

main = map (\x -> chr (x+65)) $ map (\x -> (ord (fst x) - 65) - 4) $ map last $ map countdooku (seventhson chiff)
